/**
 * @file tpl_isr1_handlers.s
 *
 * @section desc Assembly file containing handlers of the configured ISR1
 *
 * INTC hardware branch table for application test
 * Automatically generated by goil on Wed Apr 06 18:56:06 2016	
 * from root OIL file Trampoline_Application.oil
 *
 * @section copyright Copyright
 *
 * Trampoline OS
 *
 * Trampoline is copyright (c) IRCCyN 2005-2007
 * MPC5674F port - copyright(c) 2016 propriete de l'IRT Saint Exupery, tous droits reserves
 * Trampoline is protected by the French intellectual property law.
 *
 * This software is distributed under the Lesser GNU Public Licence
 *
 * @section infos File informations
 *
 * $Date$
 * $Rev$
 * $Author$
 * $URL$
 */

#include "tpl_assembler.h" 
#include "tpl_registers.h"

 TPL_EXTERN PIT_2_ISR 
 TPL_EXTERN SW_IT_0_ISR 

  .text
  .section .osCode CODE_ACCESS_RIGHT
  .global tpl_set_it_prio

tpl_set_it_prio:
    e_lis  r11,TPL_HIG(INTC_PSR)
    e_or2i r11,TPL_LOW(INTC_PSR)
 
	e_li   r12,1	 
	e_stb  r12,301(r11)		
	e_li   r12,3	 
	e_stb  r12,303(r11)		
	e_li   r12,4	 
	e_stb  r12,0(r11) 
	e_li   r12,1	 
	e_stb  r12,7(r11)  
	se_blr

  .text
  .section  .__exception_handlers CODE_ACCESS_RIGHT
  
  .global PIT_2_handler
 PIT_2_handler:
	
	/* Prologue */
	e_stwu  r1,-0x50(r1)        /* Create stack frame */
	se_stw  r3,0x28(r1)		  
	mflr    r3
	se_stw  r3,0x14(r1)         /* Save LR since it will modified when calling prologue function */
	
	/* Call the prologue function to save needed registers */ 
	e_bl    prologue 
	
	/* Execute the interrupt routine */
	e_bl    PIT_2_ISR
	
	/* Call epilogue to restore registers' content */
	e_bl 	epilogue
	
	se_lwz   r3,0x14(r1)        /* Restore LR	*/                    
	se_mtlr  r3
	se_lwz   r3,0x28(r1)		
	e_add16i r1,r1,0x50         /* Delete stack frame */
 
	se_rfi                      /* End of Interrupt */
	
  
  .global SW_IT_0_handler
 SW_IT_0_handler:
	
	/* Prologue */
	e_stwu  r1,-0x50(r1)        /* Create stack frame */
	se_stw  r3,0x28(r1)		  
	mflr    r3
	se_stw  r3,0x14(r1)         /* Save LR since it will modified when calling prologue function */
	
	/* Call the prologue function to save needed registers */ 
	e_bl    prologue 
	
	/* Execute the interrupt routine */
	e_bl    SW_IT_0_ISR
	
	/* Call epilogue to restore registers' content */
	e_bl 	epilogue
	
	se_lwz   r3,0x14(r1)        /* Restore LR	*/                    
	se_mtlr  r3
	se_lwz   r3,0x28(r1)		
	e_add16i r1,r1,0x50         /* Delete stack frame */
 
	se_rfi                      /* End of Interrupt */
	
  prologue: 
  mfsrr0   r3			      /* Store SRR0:1(must be done before enabling EE) */
  se_stw   r3,0x0C(r1)
  mfsrr1   r3				  	
  se_stw   r3,0x10(r1)

  wrteei   1                  /* Set MSR[EE]=1	*/

  e_stw    r12,0x4C(r1)       /* Store rest of gprs */
  e_stw    r11,0x48(r1)
  e_stw    r10,0x44(r1)
  e_stw    r9,0x40(r1)
  e_stw    r8,0x3C(r1)
  se_stw   r7,0x38(r1)
  se_stw   r6,0x34(r1)
  se_stw   r5,0x30(r1)
  se_stw   r4,0x2C(r1)        
  se_stw   r0,0x24(r1)	  
  mfcr     r3                  /* Store CR */
  se_stw   r3,0x20(r1)
  mfxer    r3                  /* Store XER */
  se_stw   r3,0x1C(r1)
  se_mfctr r3                  /* Store CTR */
  se_stw   r3,0x18(r1)
  
  se_blr
  
  epilogue:
  se_lwz   r3,0x18(r1)        /* Restore CTR */
  se_mtctr r3
  se_lwz   r3,0x1C(r1)        /* Restore XER */
  mtxer    r3
  se_lwz   r3,0x20(r1)        /* Restore CR */
  mtcrf    0xff,r3
  se_lwz   r0,0x24(r1)        /* Restore other gprs except working registers */
  se_lwz   r5,0x30(r1)
  se_lwz   r6,0x34(r1)
  se_lwz   r7,0x38(r1)
  e_lwz    r8,0x3C(r1)
  e_lwz    r9,0x40(r1)
  e_lwz    r10,0x44(r1)
  e_lwz    r11,0x48(r1)
  e_lwz    r12,0x4C(r1)
  mbar     0                   /* Ensure store to clear interrupt flag bit completed */
                                
  e_lis    r3,TPL_HIG(INTC_EOIR) /* Load upper half of EIOR address to r3 */
  e_or2i   r3,TPL_LOW(INTC_EOIR)
  se_li    r4,0
  		
  wrteei   0                   /* Disable interrupts for rest of handler */
     
  e_stw    r4,0(r3)  		   /* Write 0 on INTC_EIOR */
       
  se_lwz   r3,0x0C(r1)         /* Restore SRR0 */
  mtsrr0   r3
  se_lwz   r3,0x10(r1)         /* Restore SRR1 */
  mtsrr1   r3
  se_lwz   r4,0x2C(r1)         /* Restore working registers */
  
  se_blr

/* End of file tpl_isr1_handlers.s */
