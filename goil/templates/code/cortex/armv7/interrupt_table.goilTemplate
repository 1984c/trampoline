#include "tpl_machine.h"

%
%
#define OS_START_SEC_CODE
#include "tpl_memmap.h"
%

#------------------------------------------------------------------------------*
# Target specific initializations
# build the maps for IRQ
#
let objForIRQ := emptymap

# Map ISR into objForIRQ
foreach isr in ISR do
  let key := isr::SOURCE
  if not exists objForIRQ[key] then
    let objForIRQ[key] := emptylist
  end if
  let isr::KIND := "ISR"
  let objForIRQ[key] += isr
end foreach

# Map COUNTER into objForIRQ
foreach cnt in COUNTER do
  let key := cnt::SOURCE
  if not exists objForIRQ[key] then
    let objForIRQ[key] := emptylist
  end if
  let cnt::KIND := "COUNTER"
  let objForIRQ[key] += cnt
end foreach

let INTERRUPTMAP := mapof INTERRUPT by NAME
#------------------------------------------------------------------------------*

foreach objList in objForIRQ do
  let indexISR2 := 0
  foreach obj in objList do
    if obj::KIND == "ISR" then
      if obj::CATEGORY == 1 then
%
  extern FUNC(void, OS_CODE) % !obj::NAME %_function(void);
%
      end if
    end if
  end foreach
end foreach

foreach objList in objForIRQ do
%
FUNC(void, OS_CODE) % !KEY %_Handler(void)
{
%
  let indexISR2 := 0
  foreach obj in objList do
    if obj::KIND == "ISR" then
# ISR 1
      if obj::CATEGORY == 1 then
%
  % !obj::NAME %_function();
%
      else
        if obj::CATEGORY == 2 then
# ISR2
%
  tpl_central_interrupt_handler(% !([TASKS length] + indexISR2) %);
%
          let indexISR2 := indexISR2 + 1
        else
          error obj::CATEGORY : "This interrupt category ".obj::CATEGORY." does not exist"
        end if
      end if
    else
      if obj::KIND == "COUNTER" then
%  tpl_tick_% !obj::NAME %();
%
      end if
    end if
  end foreach
%
}
%
end foreach
%
#define OS_STOP_SEC_CODE
#include "tpl_memmap.h"
%

# vim:ft=goil_templates
