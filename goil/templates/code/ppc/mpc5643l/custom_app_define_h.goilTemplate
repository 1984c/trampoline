/*=============================================================================
 * Target specific definitions
 */

/*-----------------------------------------------------------------------------
 *  Timer channel possible values
 */

#define TPL_PIT_0       0
#define TPL_PIT_1       1
#define TPL_PIT_2       2
#define TPL_PIT_3       3

%
let channel_map := emptymap
let channel_map["pit_ch0"] := "TPL_PIT_0"
let channel_map["pit_ch1"] := "TPL_PIT_1"
let channel_map["pit_ch2"] := "TPL_PIT_2"
let channel_map["pit_ch3"] := "TPL_PIT_3"
%

/*-----------------------------------------------------------------------------
 * Chosen timers
 */

%
# Count only counters used in applications
let used_counters := emptymap
foreach app in APPLICATION do
  foreach app_counter in app::COUNTER do
    foreach counter in COUNTER do
      if app_counter::VALUE == counter::NAME then
        let used_counters[counter::SOURCE] := counter
      end if
    end foreach
  end foreach
end foreach

let number_of_pit_used := 0
let watchdog_frequency := 0
let watchdog_channel    := ""
foreach counter in used_counters do
  if counter::SOURCE != "no_pit" then
    let number_of_pit_used := number_of_pit_used + 1
  end if
  if counter::HANDLER == "watchdog" & counter::SOURCE != "no_pit" then
    let watchdog_frequency := counter::FREQUENCY
    let watchdog_channel   := channel_map[counter::SOURCE]
  end if
end foreach
%

#define TPL_USE_DECREMENTER     % !yesNo(exists used_counters["no_pit"]) %
#define TPL_PIT_CHAN_COUNT      % !number_of_pit_used %
%if watchdog_channel != "" then
%#define TPL_WATCHDOG_RATIO      %!watchdog_frequency%
#define TPL_WDG_TIMER           %!watchdog_channel
else
%#define TPL_WATCHDOG_RATIO      0
#define TPL_WDG_TIMER           TPL_NO_TIMER
%end if
%

/*-----------------------------------------------------------------------------
 * Enable multicore
 */
/* TODO : With multicore
 *          Multicore source must be separated in another directory.
 *          The chosen code must then be picked from the right directory
 *          following this flag state.
 */
#define WITH_MULTICORE     % !yesNo(OS::NUMBER_OF_CORES > 1) %

/*-----------------------------------------------------------------------------
 * Use VLE Assembly
 */

/* TODO : Use Vle
 *          VLE's source code must be separated in another directory.
 *          The chosen code must then be picked from the right directory
 *          following this flag state.
 */
#define WITH_VLE     % !yesNo(OS::USEVLE) %

/*-----------------------------------------------------------------------------
 * Use FLOAT instructions
 */
#define WITH_FLOAT     % !yesNo(OS::USEFLOAT) %

/*-----------------------------------------------------------------------------
 * Intercore IT
 */
%
let irqs := mapof INTERRUPT by NAME

if exists INTERCORE_INTERRUPT then
  foreach it in INTERCORE_INTERRUPT do
%#define TPL_INTERCORE_IT_% !INDEX %   % !irqs[it::SOURCE]::ID%
%
  end foreach
end if
%

