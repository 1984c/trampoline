/**
 * @file % !FILENAME %
 *
 * @section desc File description
 *
 * External interrupts init and acknowledge functions for % !CPUNAME %
 * Automatically generated by goil on % !TIMESTAMP %
 * from root OIL file % !OILFILENAME %
 *
 * @section copyright Copyright
 *
 * Trampoline OS
 *
 * Trampoline is copyright (c) IRCCyN 2005-2007
 * Trampoline is protected by the French intellectual property law.
 *
 * This software is distributed under the Lesser GNU Public Licence
 *
 * @section infos File informations
 *
 * $Date$
 * $Rev$
 * $Author$
 * $URL$
 */

/*=============================================================================
 * External interrupts configuration structures
 */

%
#«FOREACH OsIsrs.select(e|e.OsIsrCategory.isCATEGORY_1()) AS e -»
#extern FUNC(void, OS_CODE) «e.shortName»(void);
#«ENDFOREACH-»
%
%
let sources := mapof INTERRUPT by NAME
let isrs := mapof ISRS by NAME
%
#include "tpl_registers.h"

#define OS_START_SEC_CODE
#include "tpl_memmap.h"

FUNC(void, OS_CODE) tpl_init_isr_prio(void)
{
  VAR(uint16, AUTOMATIC) isr_index;
  VAR(uint8, AUTOMATIC) intc_psr_val = 0;

%
loop core_id from 0 to OS::NUMBER_OF_CORES - 1 do
%
  /* ==========================================================================
   *    CORE %!core_id%
   */
  /* Reset priorities */
  for(isr_index = 0; isr_index < % ![ISRS length]%; isr_index++)
  {
    TPL_INTC(%!core_id%).PSR[isr_index] = 0;
  }

  /* ISR Priorities */
%
  foreach app in APPLICATIONS do
    if app::CORE == core_id then
      foreach isr in app::ISR do
        let isr := isrs[isr::VALUE]
%
  /* Isr % !isr::NAME % */
  intc_psr_val = % !isr::PRIORITY %;
  // #if !(MPC5668G || MPC5643L || MPC5646C)
  // intc_psr_val = (uint8)(intc_psr_val | (0x1 << 6));
  // #end if

  TPL_INTC(%!core_id%).PSR[% !sources[isr::SOURCE]::ID %] = intc_psr_val;
%
    end foreach
  end if
end foreach

%
  /* Counters have the maximum priority (0xF) */
  intc_psr_val = 0xF;
  // #if !(MPC5668G || MPC5643L)
  // intc_psr_val = (uint8)(intc_psr_val | (0x1 << 6));
  // #end if

%
  let counter_map   := mapof COUNTER by NAME
  let interrupt_map := mapof INTERRUPT by NAME

  foreach application in APPLICATION do
    if application::CORE == core_id then
      foreach counter_name in application::COUNTER do
        let counter := counter_map[counter_name::VALUE]
        if counter::SOURCE != "no_pit" then
          let interrupt := interrupt_map[counter::SOURCE]
%  TPL_INTC(%!core_id%).PSR[% !interrupt::ID %] = intc_psr_val;
%
        end if
      end foreach
    end if
  end foreach

  if exists INTERCORE_INTERRUPT then
%
  /* Intercore interrupts */
%
    foreach intercore_it in INTERCORE_INTERRUPT do
      if intercore_it::CORE == core_id then
    %  TPL_INTC(%!core_id%).PSR[% !sources[intercore_it::SOURCE]::ID %] = intc_psr_val;
%
      end if
    end foreach
  end if
end loop
%
}

%
let channel_map := emptymap
let channel_map["pit_ch0"] := "TPL_PIT_0"
let channel_map["pit_ch1"] := "TPL_PIT_1"
let channel_map["pit_ch2"] := "TPL_PIT_2"
let channel_map["pit_ch3"] := "TPL_PIT_3"
let channel_map["no_pit"]  := "TPL_DECREMENTER"

# Get a list of used counters (with no duplicates)
let used_counters := emptymap
foreach counter in COUNTER do
  # By the way, check if there is an error input for the frequencies
  if exists used_counters[counter::SOURCE] then
    if used_counters[counter::SOURCE]::FREQUENCY != counter::FREQUENCY then
      error counter::FREQUENCY : "Two different frequencies for the same counter."
    end if
  end if
  let used_counters[counter::SOURCE] := counter
end foreach
%

/**
 * tpl_load_pits loads the used pit channels with their initialized values and
 * start the channel
 */
FUNC(void, OS_CODE) tpl_load_pits(void)
{
%
foreach counter in used_counters do
  if counter::SOURCE != "no_pit" then
    let channel := channel_map[counter::SOURCE]
%  /* Counter % !counter::SOURCE % */
  PIT_LVR(% !channel %) = % !counter::FREQUENCY %;
  PIT_FR(% !channel %) = PIT_FR_TIF;
  PIT_CR(% !channel %) = PIT_CR_TEN | PIT_CR_TIE;

%
  end if
end foreach
%
}

#define OS_STOP_SEC_CODE
#include "tpl_memmap.h"

/* End of file % !FILENAME % */

