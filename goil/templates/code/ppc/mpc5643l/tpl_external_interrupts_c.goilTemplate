/**
 * @file % !FILENAME %
 *
 * @section desc File description
 *
 * External interrupts init and acknowledge functions for % !CPUNAME %
 * Automatically generated by goil on % !TIMESTAMP %
 * from root OIL file % !OILFILENAME %
 *
 * @section copyright Copyright
 *
 * Trampoline OS
 *
 * Trampoline is copyright (c) IRCCyN 2005-2007
 * Trampoline is protected by the French intellectual property law.
 *
 * This software is distributed under the Lesser GNU Public Licence
 *
 * @section infos File informations
 *
 * $Date$
 * $Rev$
 * $Author$
 * $URL$
 */

/*=============================================================================
 * External interrupts configuration structures
 */
%
#«FOREACH OsIsrs.select(e|e.OsIsrCategory.isCATEGORY_1()) AS e -»
#extern FUNC(void, OS_CODE) «e.shortName»(void);
#«ENDFOREACH-»
%
%
let sources := mapof INTERRUPT by NAME
let counters := mapof COUNTERS by NAME
let inter_it := emptymap
if OS::NUMBER_OF_CORES > 1 then
  let inter_it := mapof INTERCORE_INTERRUPT by NAME
end if
let isrs := mapof ISRS by NAME
%
#include "tpl_registers.h"

#define OS_START_SEC_CODE
#include "tpl_memmap.h"

FUNC(void, OS_CODE) tpl_init_isr_prio(void)
{
  /**** CORE 0 ****/
  VAR(uint16, AUTOMATIC) isr_index;
  VAR(uint8, AUTOMATIC) intc_psr_val = 0;

  for(isr_index = 0; isr_index < % ![ISRS length]%; isr_index++)
  {
    TPL_INTC(0).PSR[isr_index] = 0;
  }

%
foreach app in APPLICATIONS do
  if app::CORE == 0 then
    foreach isr in app::ISR do
      let isr := isrs[isr::VALUE]
%
  /* Isr % !isr::NAME % */
  intc_psr_val = % !isr::PRIORITY %;
  // if MPC5668G || MPC5643L() || MPC5646C
  intc_psr_val = (uint8)(intc_psr_val | (0x0 << 6));
  // else
  // intc_psr_val = (uint8)(intc_psr_val | (0x1 << 6));
  // end if

  TPL_INTC(0).PSR[% !sources[isr::SOURCE]::ID %] = intc_psr_val;
%
    end foreach
  end if
end foreach
%
%# set priority for pit interrupt if used by tick or timing protection
%

  intc_psr_val = 0xF;

 // if MPC5668G() || MPC5643L
  intc_psr_val = (uint8)(intc_psr_val | (0x0 << 6));
 // else
 // intc_psr_val = (uint8)(intc_psr_val | (0x1 << 6));
 // end if


%
if counters["SystemCounter"]::SOURCE != "no_pit" then
%
  TPL_INTC(0).PSR[% !sources[counters["SystemCounter"]::SOURCE]::ID %] = intc_psr_val; // SystemCounter
%
end if

if OS::TIMINGPROTECTION then

  let watchdog_pit := 0
  let is_watchdog_enabled := false
  foreach counter in COUNTER do
    if counter::HANDLER == "watchdog" & counter::SOURCE != "no_pit" then
      let watchdog_pit := counter::SOURCE
      let is_watchdog_enabled := true
    end if
  end foreach

  if is_watchdog_enabled then
%
  TPL_INTC(0).PSR[% !sources[watchdog_pit]::ID %] = intc_psr_val; // Watchdog
%
  end if
end if

if OS::NUMBER_OF_CORES > 1 then
%
  TPL_INTC(0).PSR[% !sources[inter_it["intercore_it1"]::SOURCE]::ID %] = intc_psr_val; // Intercore_it core 0

  /**** CORE 1 ****/
  intc_psr_val = 0xF;
  intc_psr_val = (uint8)(intc_psr_val | (0x3 << 6));
  TPL_INTC(1).PSR[% !sources[inter_it["intercore_it2"]::SOURCE]::ID %] = intc_psr_val; // Intercore_it core 1

%
  foreach app in APPLICATIONS do
    if app::CORE == 1 then
      foreach isr in app::ISR do
        let isr := isrs[isr::VALUE]
%
  /* Isr % !isr::NAME % */
  intc_psr_val = % !isr::PRIORITY %;
  %# if MPC5668G || MPC5643L() || MPC5646C
  %
  intc_psr_val = (uint8)(intc_psr_val | (0x3 << 6));
  %# else
   # intc_psr_val = (uint8)(intc_psr_val | (0x1 << 6));
   # end if
  %
  TPL_INTC(1).PSR[% !sources[isr::SOURCE]::ID %] = intc_psr_val;
%
      end foreach
    end if
  end foreach
end if
%
}

#define OS_STOP_SEC_CODE
#include "tpl_memmap.h"

/* End of file % !FILENAME % */

