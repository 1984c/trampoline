#include "tpl_os_kernel.h"          /* tpl_schedule */
#include "tpl_os_timeobj_kernel.h"  /* tpl_counter_tick */
#include "tpl_machine_interface.h"  /* tpl_switch_context_from_it */

#define OS_START_SEC_CODE
#include "tpl_memmap.h"

%
###############################################################################
#   tpl_call_counter_tick
#
if OS::NUMBER_OF_CORES == 1 then
  let counter_map   := mapof COUNTER by NAME
  let interrupt_map := mapof INTERRUPT by NAME

  let used_interrupts := emptymap
  foreach application in APPLICATION do
    foreach counter_name in application::COUNTER do
      let counter := counter_map[counter_name::VALUE]
      let interrupt := interrupt_map[counter::SOURCE]
      let used_interrupts[counter::SOURCE] := interrupt
    end foreach
  end foreach

  # Create the function for each used interrupt in this core
  foreach interrupt in used_interrupts do
%
FUNC(tpl_bool, OS_CODE) tpl_call_counter_tick_% !interrupt::NAME %(void)
{
%
  foreach counter in HARDWARECOUNTERS do
%  tpl_counter_tick(&% !counter::NAME %_counter_desc);
%
  end foreach
%
  if (tpl_kern.need_schedule)
  {
    tpl_schedule_from_running();
    LOCAL_SWITCH_CONTEXT(0)
  }
  return TRUE;
}
%
  end foreach
else
%VAR(tpl_lock, OS_VAR) tpl_call_counter_lock = UNLOCKED_LOCK;%

  let counter_map   := mapof COUNTER by NAME
  let interrupt_map := mapof INTERRUPT by NAME

  # Get used counter source for each core
  loop core_id from 0 to OS::NUMBER_OF_CORES - 1 do
    let used_interrupts := emptymap
    foreach application in APPLICATION do
      if application::CORE == core_id then
        foreach counter_name in application::COUNTER do
          let counter := counter_map[counter_name::VALUE]
          let interrupt := interrupt_map[counter::SOURCE]
          let used_interrupts[counter::SOURCE] := interrupt
        end foreach
      end if
    end foreach

    # Create the function for each used interrupt in this core
    foreach interrupt in used_interrupts do
%
FUNC(tpl_bool, OS_CODE) tpl_call_counter_tick_% !interrupt::NAME %_% !core_id %(void)
{
  tpl_get_lock(&tpl_call_counter_lock);
%
    # Call tpl_counter tick for each counter using this interrupt in this core
    foreach application in APPLICATION do
      if application::CORE == core_id then
        foreach counter_name in application::COUNTER do
          let counter := counter_map[counter_name::VALUE]
          if counter::SOURCE == interrupt::NAME then%
  tpl_counter_tick(&% !counter::NAME %_counter_desc);%
          end if
        end foreach
      end if
    end foreach
%
  tpl_multi_schedule();
  tpl_dispatch_context_switch();
  if (TPL_KERN(% !core_id %).need_switch != NO_NEED_SWITCH)
  {
    LOCAL_SWITCH_CONTEXT(% !core_id %)
  }

  tpl_release_lock(&tpl_call_counter_lock);
  return TRUE;
}
%
    end foreach
  end loop
end if

###############################################################################
#   tpl_tick_handler
#
let counter_map   := mapof COUNTER by NAME
let interrupt_map := mapof INTERRUPT by NAME

let channel_map := emptymap
let channel_map["pit_ch0"] := "TPL_PIT_0"
let channel_map["pit_ch1"] := "TPL_PIT_1"
let channel_map["pit_ch2"] := "TPL_PIT_2"
let channel_map["pit_ch3"] := "TPL_PIT_3"

loop core_id from 0 to OS::NUMBER_OF_CORES - 1 do
  let used_interrupts := emptymap
  foreach application in APPLICATION do
    if application::CORE == core_id then
      foreach counter_name in application::COUNTER do
        let counter := counter_map[counter_name::VALUE]
        if counter::SOURCE != "no_pit" then
          let interrupt := interrupt_map[counter::SOURCE]
          let used_interrupts[counter::SOURCE] := interrupt
        end if
      end foreach
    end if
  end foreach

  foreach interrupt in used_interrupts do
    if OS::NUMBER_OF_CORES > 1 then
%FUNC(void, OS_CODE) tpl_tick_handler_% !interrupt::NAME%_% !core_id %(void)
{
  /* FIXME : This date counter works only if there is one hardware counter per
   *         core.
   */
  GET_CURRENT_DATE(%!core_id%) = GET_CURRENT_DATE(%!core_id%) + 1;
  /* Clear interrupt flag */
  PIT_FR(% !channel_map[interrupt::NAME] %) = PIT_FR_TIF;
  tpl_call_counter_tick_% !interrupt::NAME %_% !core_id %();
}
%
    else
%FUNC(void, OS_CODE) tpl_tick_handler_% !interrupt::NAME%(void)
{
  /* FIXME : This date counter works only if there is one hardware counter per
   *         core.
   */
  GET_CURRENT_DATE(%!core_id%) = GET_CURRENT_DATE(%!core_id%) + 1;
  /* Clear interrupt flag */
  PIT_FR(% !channel_map[interrupt::NAME] %) = PIT_FR_TIF;
  tpl_call_counter_tick_% !interrupt::NAME %();
}
%
    end if
  end foreach
end loop
%
#define OS_STOP_SEC_CODE
#include "tpl_memmap.h"

